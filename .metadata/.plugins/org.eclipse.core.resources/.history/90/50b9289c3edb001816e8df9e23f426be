package com.revature.test;

import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mrunit.mapreduce.MapDriver;
import org.apache.hadoop.mrunit.mapreduce.MapReduceDriver;
import org.apache.hadoop.mrunit.mapreduce.ReduceDriver;
import org.junit.Before;
import org.junit.Test;

import com.revature.map.MapperOne;
import com.revature.reduce.ReducerOne;

public class ProblemOneTest {

	/*
	 * Declare harnesses that let you test a mapper, a reducer, and
	 * a mapper and a reducer working together.
	 */
	private MapDriver<LongWritable, Text, Text, DoubleWritable> mapDriver;
	private ReduceDriver<Text, DoubleWritable, Text, DoubleWritable> reduceDriver;
	private MapReduceDriver<LongWritable, Text, Text, DoubleWritable, Text, DoubleWritable> mapReduceDriver;

	/*
	 * Set up the test. This method will be called before every test.
	 */
	@Before
	public void setUp() {

		/*
		 * Set up the mapper test harness.
		 */
		MapperOne mapperOne = new MapperOne();
		mapDriver = new MapDriver<LongWritable, Text, Text, DoubleWritable>();
		mapDriver.setMapper(mapperOne);

		/*
		 * Set up the reducer test harness.
		 */
		ReducerOne reducerOne = new ReducerOne();
		reduceDriver = new ReduceDriver<Text, DoubleWritable, Text, DoubleWritable>();
		reduceDriver.setReducer(reducerOne);

		/*
		 * Set up the mapper/reducer test harness.
		 */
		mapReduceDriver = new MapReduceDriver<LongWritable, Text, Text, DoubleWritable, Text, DoubleWritable>();
		mapReduceDriver.setMapper(mapperOne);
		mapReduceDriver.setReducer(reducerOne);
	}

	/*
	 * Test the mapper.
	 */
	@Test
	public void testMapper() {

		Text testLine = new Text("\"Aruba\",\"ABW\",\"Gross graduation ratio, tertiary, female (%)\",\"SE.TER.CMPL.FE.ZS\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3.0426\",\"10.51587\",\"9.28962\",\"6.13288\",\"6.73077\",\"4.46154\",\"4.82655\",\"12.28879\",\"4.20712\",\"8.46561\",\"9.07336\",\"10.15936\",\"16.10619\",\"16.69342\",\"\",\"20.4918\",\"\",\"\",");
		/*
		 * For this test, the mapper's input will be "1 cat cat dog" 
		 */
		mapDriver.withInput(new LongWritable(1), new Text(testLine));

		/*
		 * The expected output is "cat 1", "cat 1", and "dog 1".
		 */
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(3.0426));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(10.51587));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(9.28962));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(6.13288));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(6.73077));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(4.46154));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(4.82655));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(12.28879));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(4.20712));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(8.46561));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(9.07336));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(10.15936));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(16.10619));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(16.69342));
		mapDriver.withOutput(new Text("Aruba"), new DoubleWritable(20.4918));


		/*
		 * Run the test.
		 */
		mapDriver.runTest();
	}

	/*
	 * Test the reducer.
	 */
	@Test
	public void testReducer() {

		List<DoubleWritable> values = new ArrayList<DoubleWritable>();
		values.add(new DoubleWritable(3.0426));
		values.add(new DoubleWritable(10.51587));
		values.add(new DoubleWritable(9.28962));
		values.add(new DoubleWritable(6.13288));
		values.add(new DoubleWritable(6.73077));
		values.add(new DoubleWritable(4.46154));
		values.add(new DoubleWritable(4.82655));
		values.add(new DoubleWritable(12.28879));
		values.add(new DoubleWritable(4.20712));
		values.add(new DoubleWritable(8.46561));
		values.add(new DoubleWritable(9.07336));
		values.add(new DoubleWritable(10.15936));
		values.add(new DoubleWritable(16.10619));
		values.add(new DoubleWritable(16.69342));
		values.add(new DoubleWritable(20.4918));

		/*
		 * For this test, the reducer's input will be "cat 1 1".
		 */
		reduceDriver.withInput(new Text("Aruba"), values);

		/*
		 * The expected output is "cat 2"
		 */
		reduceDriver.withOutput(new Text("Aruba"), new DoubleWritable(9.499032));

		/*
		 * Run the test.
		 */
		reduceDriver.runTest();
	}

	/*
	 * Test the mapper and reducer working together.
	 */
	@Test
	public void testMapReduce() {

		Text testLine = new Text("\"Aruba\",\"ABW\",\"Gross graduation ratio, tertiary, female (%)\",\"SE.TER.CMPL.FE.ZS\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3.0426\",\"10.51587\",\"9.28962\",\"6.13288\",\"6.73077\",\"4.46154\",\"4.82655\",\"12.28879\",\"4.20712\",\"8.46561\",\"9.07336\",\"10.15936\",\"16.10619\",\"16.69342\",\"\",\"20.4918\",\"\",\"\",");
		/*
		 * For this test, the mapper's input will be "1 cat cat dog" 
		 */
		mapReduceDriver.withInput(new LongWritable(1), new Text(testLine));

		/*
		 * The expected output (from the reducer) is "cat 2", "dog 1". 
		 */
		mapReduceDriver.addOutput(new Text("Aruba"), new DoubleWritable(9.499032));

		/*
		 * Run the test.
		 */
		mapReduceDriver.runTest();
	}
}