package com.revature;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import com.revature.map.MapperThree;
import com.revature.map.MapperTwo;
import com.revature.reduce.ReducerThree;
import com.revature.reduce.ReducerThreeCombiner;
import com.revature.reduce.ReducerTwo;

public class ProblemThree extends Configured implements Tool {

	if (args.length != 2) {
		System.out.printf(
				"Usage: ProjectOne <input dir> <output dir>\n");
		System.exit(-1);
	}

	Job job = new Job();

	job.setJarByClass(ProblemTwo.class);

	job.setJobName("Project One");


	FileInputFormat.setInputPaths(job, new Path(args[0]));
	FileOutputFormat.setOutputPath(job, new Path(args[1]));

	job.setMapperClass(MapperThree.class);
	job.setReducerClass(ReducerThree.class);

	job.setMapOutputKeyClass(Text.class);
	job.setMapOutputValueClass(DoubleWritable.class);
	
	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(DoubleWritable.class);

	/*
	 * Start the MapReduce job and wait for it to finish.
	 * If it finishes successfully, return 0. If not, return 1.
	 */
	boolean success = job.waitForCompletion(true);
	System.exit(success ? 0 : 1);
}
}
